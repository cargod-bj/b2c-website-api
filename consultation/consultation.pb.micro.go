// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: consultation/consultation.proto

package consultation

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/anypb"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Consultation service

func NewConsultationEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Consultation service

type ConsultationService interface {
	SendConsultation2Google(ctx context.Context, in *RequestDto, opts ...client.CallOption) (*Response, error)
}

type consultationService struct {
	c    client.Client
	name string
}

func NewConsultationService(name string, c client.Client) ConsultationService {
	return &consultationService{
		c:    c,
		name: name,
	}
}

func (c *consultationService) SendConsultation2Google(ctx context.Context, in *RequestDto, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Consultation.SendConsultation2Google", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Consultation service

type ConsultationHandler interface {
	SendConsultation2Google(context.Context, *RequestDto, *Response) error
}

func RegisterConsultationHandler(s server.Server, hdlr ConsultationHandler, opts ...server.HandlerOption) error {
	type consultation interface {
		SendConsultation2Google(ctx context.Context, in *RequestDto, out *Response) error
	}
	type Consultation struct {
		consultation
	}
	h := &consultationHandler{hdlr}
	return s.Handle(s.NewHandler(&Consultation{h}, opts...))
}

type consultationHandler struct {
	ConsultationHandler
}

func (h *consultationHandler) SendConsultation2Google(ctx context.Context, in *RequestDto, out *Response) error {
	return h.ConsultationHandler.SendConsultation2Google(ctx, in, out)
}
